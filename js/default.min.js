/*! Known 2018-08-05 */
"use strict";function Security(){}function Logger(){}function Notifications(){}function doPoll(){Notifications.poll()}function wwwroot(){return known.config.displayUrl}function isLoggedIn(){return!("undefined"==typeof known||!known.session.loggedIn)}Security.getCSRFToken=function(a,b){void 0==b&&(b=known.currentPageUrl),$.ajax({type:"GET",data:{url:b},url:known.config.displayUrl+"service/security/csrftoken/"}).done(function(b,c,d){a(b.token,b.time)})},Security.refreshTokens=function(){$(".known-security-token").each(function(){var a=$(this).closest("form");Security.getCSRFToken(function(b,c){a.find("input[name=__bTk]").val(b),a.find("input[name=__bTs]").val(c)},a.find("input[name=__bTa]").val())})},setInterval(function(){Security.refreshTokens()},3e5),Security.activateACLControls=function(){$(".acl-ctrl-option").each(function(){$(this).data("acl")==$(this).closest(".access-control-block").find("input").val()&&$(this).closest(".btn-group").find(".dropdown-toggle").html($(this).html()+' <span class="caret"></span>')}),$(".acl-ctrl-option").on("click",function(){$(this).closest(".access-control-block").find("input").val($(this).data("acl")),$(this).closest(".btn-group").find(".dropdown-toggle").html($(this).html()+' <span class="caret"></span>'),$(this).closest(".btn-group").find(".dropdown-toggle").click()})},$(document).ready(function(){Security.activateACLControls()}),Logger.log=function(a,b){switch(void 0===b&&(b="INFO"),b.toUpperCase()){case"ALERT":case"ERROR":case"EXCEPTION":b="ERROR",console.error(b+": "+a);break;case"WARN":case"WARNING":b="WARNING",console.warn(b+": "+a);break;default:b="INFO",console.log(b+": "+a)}Security.getCSRFToken(function(c,d){$.ajax({type:"POST",data:{level:b,message:a,__bTk:c,__bTs:d},url:known.config.displayUrl+"service/system/log/"})},known.config.displayUrl+"service/system/log/")},Logger.info=function(a){Logger.log(a,"INFO")},Logger.warn=function(a){Logger.log(a,"WARN")},Logger.error=function(a){Logger.log(a,"ERROR")},Logger.deprecated=function(a){Logger.info("DEPRECATED "+a)},Logger.errorHandler=function(a){var b=a.error.stack,c=a.error.toString();b&&(c+="\n"+b),console.error(a),Logger.log(c,"ERROR")},window.addEventListener("error",function(a){Logger.errorHandler(a)}),Notifications.poll=function(){$.get(known.config.displayUrl+"service/notifications/new-notifications").done(function(a){if(a.notifications&&a.notifications.length>0)for(i=0;i<a.notifications.length;i++){var b=a.notifications[i].title,c=a.notifications[i].body,d=a.notifications[i].icon,e=a.notifications[i].link;try{var f=new Notification(b,{icon:d,body:c,data:e});f.onclick=function(a){window.location.href=e}}catch(a){}}}).fail(function(a){})},Notifications.enable=function(a){if(known.session.loggedIn){if(!("Notification"in window))return void console.log("The Notification API is not supported by this browser");self.addEventListener("notificationclick",function(a){window.location.href=a.notification.data}),"denied"===Notification.permission||"granted"===Notification.permission||a?"granted"===Notification.permission&&setInterval(Notifications.poll,3e4):Notification.requestPermission(function(a){"granted"===a&&setInterval(Notifications.poll,3e4)})}},Notifications.isEnabled=function(){return!!known.session.loggedIn&&("Notification"in window?"granted"===Notification.permission:(console.log("The Notification API is not supported by this browser"),!1))},$(document).ready(function(){Notifications.isEnabled()&&Notifications.enable(!0)}),$(document).ready(function(){var a=$("#soft-forward").attr("href");a&&(window.location=a),known.session.loggedIn});